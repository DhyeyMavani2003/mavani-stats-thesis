# Unraveling Notion of Dependence through Copulas {#sec-simple}

```{r}
#| label: setup
#| include: false

# Load knitr package
library(knitr)

# Python Engine Setup
knit_engines$set(python3 = knit_engines$get("python"))

# Load packages
library(tidyverse)
library(gt)

# Set default ggplot theme for document
theme_set(theme_classic())
# If using kableExtra tables, print blank cells instead of `NA`
options(knitr.kable.NA = "")

# Load data
load("data/temp_wnba.RData")

```

<!-- Make it accessible by starting with a motivating example, then proceed towards more rigorousness gradually until challenges for discrete case are covered. -->

In this chapter, we will formalize some aspects of phenomena such as dependence and association. In order to aid us in our understanding, we will use two bivariate random vectors. Along the way, we will visualize and analyze various aspects of their dependence and association through Python code.

Consider $(X_1, X_2)$ and $(Y_1, Y_2)$ be bivariate random vectors, each consisting of 10000 independent data-points, which are distributed with the joint distributions $F$ and $G$ respectively.  

```{python3}
#| label: fig-motivating-example
#| fig-cap: "Scatter plots of 10000 independent observations of $(X_1, X_2)$ and $(Y_1, Y_2)$ with bell-shaped curves depicting respective marginal distributions on the sides."

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import beta, expon, norm

# Set random seed for reproducibility
np.random.seed(8990)

# Number of samples
n = 10000

# Generate data for (X1, X2)
mean = [0, 0]
cov = [[1, 0.65], [0.65, 1]]  # Correlation matrix
X = np.random.multivariate_normal(mean, cov, size=n)

# Transform data for (Y1, Y2)
Y1 = beta.rvs(5, 10, size=n)
Y2 = expon.rvs(scale=1, size=n)

# Plot (X1, X2) and (Y1, Y2)
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Scatter plot for (X1, X2)
axes[0].scatter(X[:, 0], X[:, 1], alpha=0.5, s=5)
axes[0].set_title("Scatter plot of (X1, X2)")
axes[0].set_xlabel("X1")
axes[0].set_ylabel("X2")

# Add marginal histograms
axes[0].hist(X[:, 0], bins=50, density=True, alpha=0.6, color='blue', orientation='vertical', histtype='step')
axes[0].hist(X[:, 1], bins=50, density=True, alpha=0.6, color='red', histtype='step', orientation='horizontal')

# Scatter plot for (Y1, Y2)
axes[1].scatter(Y1, Y2, alpha=0.5, s=5)
axes[1].set_title("Scatter plot of (Y1, Y2)")
axes[1].set_xlabel("Y1")
axes[1].set_ylabel("Y2")

# Add marginal histograms
axes[1].hist(Y1, bins=50, density=True, alpha=0.6, color='blue', orientation='vertical', histtype='step')
axes[1].hist(Y2, bins=50, density=True, alpha=0.6, color='red', histtype='step', orientation='horizontal')

plt.tight_layout()
plt.show()
```


```{r}
#| label: fig-wnba-ht
#| fig-cap: "Distribution of heights of WNBA players in the 2024 season."

# Use Freedman-Diaconus rule to set binwidth
ht_bw <- 2 * IQR(wnba$height) / nrow(wnba)^(1/3)

# Create histogram of height faceted by player position
ggplot(wnba, aes(height)) +
  geom_histogram(binwidth = ht_bw) +
  labs(x = "Height (in)",
       y = "Count",
       caption = "Source: https://www.espn.com/wnba/stats/player") +
  theme_bw()
```


## Tables

Your tables should be publication quality. Consider using [**gt**](https://gt.rstudio.com/articles/gt.html) [@gt] or  [**kableExtra**](https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_pdf.pdf) [@kableExtra] to customize your tables. The [**gtsummary**](https://www.danieldsjoberg.com/gtsummary/) package [@gtsummary] may also come in handy.

@tbl-ht-by-pos shows the average heights of WNBA players by position. 

```{r}
#| label: tbl-ht-by-pos
#| tbl-cap: "Average WNBA player height by position."

wnba |> 
  group_by(position) |> 
  summarize(mean_ht = mean(height)) |> 
  gt() |> 
  cols_label(
    position = "Position",
    mean_ht = "Average height (in)"
  ) |> 
  fmt_number(decimals = 1)
```


<!-- 
The following section should be included at the end of each chapter that contains code.

Note that this will include code from code chunks even if `eval` is set to `false`.
-->

## @sec-simple Code

The following code was used to create @sec-simple.

### Code within chapter
```{r}
#| echo: true
#| eval: false
#| ref-label: !expr knitr::all_labels()
```

### Code sourced from external scripts
```{r}
#| echo: true
#| eval: false
{{< include src/temp01-clean-wnba.R >}}
```
